<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:si="http://www.springframework.org/schema/integration"
	xmlns:http="http://www.springframework.org/schema/integration/http"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jms="http://www.springframework.org/schema/integration/jms"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util-3.0.xsd
    ">

	<import resource="data-mapping-context.xml"/>
	<import resource="match-store-redis.xml"/>
	<import resource="hibernate/hibernate-context.xml"/>
	<context:annotation-config />
	<context:component-scan base-package="com.eharmony.services.mymatchesservice" />
	<context:component-scan base-package="com.eharmony.services.profile.client" />
	<context:component-scan base-package="com.eharmony.services.mymatchesservice.store.dao" />

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesMode" value="2" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="ignoreUnresolvablePlaceholders" value="false" />
		<property name="locations">
			<list>
				<value>classpath:mymatchesservice/mymatchesservice.global.properties</value>
				<value>classpath:mymatchesservice/hibernate/hibernate.properties</value>
				<value>classpath:mymatchesservice/hibernate/jdbc.properties</value>
				<value>file:${config.overrides.location}</value>
				<!-- <value>file:${config.secure.location}</value> -->
			</list>
		</property>
	</bean>
	
	<bean class="com.eharmony.configuration.ConfigProperties"></bean>

	<import resource="data-mapping-context.xml"/>
	<import resource="data-transformation-context.xml"/>
	<context:annotation-config />
	<context:component-scan base-package="com.eharmony.services.mymatchesservice" />
    <context:component-scan base-package="com.eharmony.communication" />


	<!-- events section -->
	<bean id="eventSender" class="com.eharmony.event.jersey.AsyncJerseyClientEventSender">
      <constructor-arg index="0" value="${event.server.url}"/>
      <constructor-arg index="1" ref="eventSenderClient"/>
    </bean>
    
    <bean id="eventSenderClient" class="com.eharmony.protorest.RestClientImpl">
      <constructor-arg index="0" value="${events.client.max.connections}"/>
      <constructor-arg index="1" value="${events.client.connect.timeout}"/>
      <constructor-arg index="2" value="${events.client.read.timeout}"/>
      <constructor-arg index="3" value="${events.client.onlyUseJson}"/>
   </bean>
	

	<!-- **************** JSON SECTION ****************** -->
	<bean id="objectMapper"
		class="com.eharmony.services.mymatchesservice.util.CustomObjectMapper" />

	<!-- **************** SERVICES SECTION ****************** -->
	<bean id="ecvService"
		class="com.eharmony.services.mymatchesservice.service.EcvService">
		<constructor-arg index="0" value="${ecvFile}" />
		<constructor-arg index="1" value="${ecv.wait.timeout.seconds}" />
	</bean>
	
	<!--  Score Service Dependencies -->
	
	<bean id="scoreServiceClient" class="com.eharmony.services.mymatchesservice.service.client.ScoreServiceClient">
        <constructor-arg name="scoreServiceHost" value="${score.service.host}"/>
        <constructor-arg name="scoreServicePort" value="${score.service.port}"/>
        <constructor-arg name="restClient" ref="restClient" />
    </bean>
    
   <bean id="restClient" class="com.eharmony.protorest.RestClientImpl">
      <constructor-arg index="0" value="${score.service.maxConnections}"/>
      <constructor-arg index="1" value="${score.service.connectTimeout}"/>
      <constructor-arg index="2" value="${score.service.readTimeout}"/>
      <constructor-arg index="3" value="${score.service.onlyUseJson}"/>
   </bean>

</beans>
